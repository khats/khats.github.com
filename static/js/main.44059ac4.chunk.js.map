{"version":3,"sources":["HelpInformer/styles.module.css","Controls/Autobot.jsx","Controls/Loose.jsx","Controls/index.jsx","Cell/index.jsx","Desk/index.jsx","modules/commands.js","modules/realtime.js","modules/events.js","LevelPassword/index.jsx","MinesCounter/index.jsx","HelpInformer/index.jsx","App.jsx","index.jsx","Cell/styles.module.css","Desk/styles.module.css"],"names":["module","exports","Autobot","props","type","onChange","useAutobot","checked","autobotEnabled","setAutobotPercent","value","autobotStopPercent","min","max","Loose","Fragment","onClick","restartGame","Controls","changeLevel","event","level","target","test","parsed","parseInt","setState","isNaN","startGame","state","this","loose","placeholder","PureComponent","Cell","open","i","j","setFlag","preventDefault","classes","classnames","styles","cell","safe","flag","mine","className","onContextMenu","React","displayName","Desk","row","matrix","desk","map","indexRow","key","indexCell","propType","PropTypes","arrayOf","number","x","y","Realtime","url","callback","connection","WebSocket","addEventListener","message","response","data","split","eventType","splice","join","trim","send","commands","RESPONSE_EVENT","NEW","MAP","OPEN","RESPONSE_PAYLOAD","CONNECTED","OK","LOSE","WIN","LevelPassword","password","MinesCounter","minesCount","HelpInformer","helpRequired","makeDecision","offsets","getSiblings","strict","mines","forEach","offset","length","findElement","push","CELL_FLAG","FLAG","MINE","REAL_MINE","SAFE_TO_OPEN","App","resolver","payload","connected","started","getMap","filter","line","rowIndex","cellIndex","startsWith","createGame","openCell","openList","points","point","step","to_open","old_matrix","exist_flags","real_mines","setupMap","should_update","every","Math","round","reduce","accum","maxflags","siblingFlags","lose","some","Component","ReactDOM","render","document","getElementById"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,aAAe,+B,2JCAlB,SAASC,EAAQC,GAC5B,OAAO,yCAEH,6BACI,sDADJ,IACsC,2BAAOC,KAAK,WAAWC,SAAUF,EAAMG,WAC7EC,QAASJ,EAAMK,kBAEf,6BACI,oEADJ,IACoD,2BAAOJ,KAAK,SAASC,SAAUF,EAAMM,kBAC9BC,MAAOP,EAAMQ,mBAAoBC,IAAK,EAAGC,IAAK,QCTlG,SAASC,EAAMX,GAC1B,OAAQ,kBAAC,IAAMY,SAAP,KACJ,wCACA,4BAAQC,QAASb,EAAMc,aAAvB,Y,ICAaC,E,YACjB,WAAYf,GAAQ,IAAD,8BACf,4CAAMA,KAQVgB,YAAc,SAACC,GACX,IAAMC,EAAQD,EAAME,OAAOZ,MAC3B,GAAI,WAAWa,KAAKF,GAAQ,CACxB,IAAMG,EAASC,SAASJ,GACxB,EAAKK,SAAS,CAACL,MAAOM,MAAMH,GAAU,GAAKA,MAbhC,EAkBnBlB,WAAa,SAACc,GACV,EAAKM,SAAS,CAAClB,iBAAkBY,EAAME,OAAOZ,SAnB/B,EAsBnBD,kBAAoB,SAACW,GACjB,EAAKM,SAAS,CAACf,mBAAoBS,EAAME,OAAOZ,SAvBjC,EA0BnBkB,UAAY,WACR,EAAKzB,MAAMyB,UAAU,EAAKC,MAAMR,MAAO,EAAKQ,MAAMrB,eAAgB,EAAKqB,MAAMlB,qBAzB7E,EAAKkB,MAAQ,CACTR,MAAO,EACPb,gBAAgB,EAChBG,mBAAoB,GALT,E,sEA+Bf,OAAO,kBAAC,IAAMI,SAAP,KACFe,KAAK3B,MAAM4B,MACN,kBAACjB,EAAD,CAAOG,YAAaa,KAAK3B,MAAMc,cAC/B,kBAAC,IAAMF,SAAP,KACE,+CACA,2BAAOX,KAAK,OAAO4B,YAAa,mBACzB3B,SAAUyB,KAAKX,YACfT,MAAOoB,KAAKD,MAAMR,QACxBS,KAAKD,MAAMR,MACR,4BAAQL,QAASc,KAAKF,WAAtB,SACE,KACN,kBAAC1B,EAAD,CAASI,WAAYwB,KAAKxB,WAAYG,kBAAmBqB,KAAKrB,kBACrDD,eAAgBsB,KAAKD,MAAMrB,eAC3BG,mBAAoBmB,KAAKD,MAAMlB,2B,GA7CtBsB,iB,wECAhCC,E,2MAGFC,KAAO,WACH,EAAKhC,MAAMgC,KAAK,EAAKhC,MAAMiC,EAAG,EAAKjC,MAAMkC,I,EAG7CC,QAAU,SAAClB,GACPA,EAAMmB,iBACN,EAAKpC,MAAMmC,QAAQ,EAAKnC,MAAMiC,EAAG,EAAKjC,MAAMkC,I,wEAGtC,IAAD,EACCG,EAAUC,KAAU,mBACrBC,IAAOC,MAAM,GADQ,cAErBD,IAAOE,KAAOd,KAAK3B,MAAMO,OAAS,GAFb,cAGrBgC,IAAOG,MAA6B,IAAtBf,KAAK3B,MAAMO,OAHJ,cAIrBgC,IAAOI,MAA6B,IAAtBhB,KAAK3B,MAAMO,OAJJ,IAM1B,OAAO,0BAAMqC,UAAWP,EAASxB,QAASc,KAAKK,KAAMa,cAAelB,KAAKQ,SAChER,KAAK3B,MAAMO,W,GApBTuC,IAAMhB,eAAnBC,EACKgB,YAAc,OAwBVhB,QCxBTiB,E,2MAOFhB,KAAO,SAACQ,EAAMS,GACV,EAAKjD,MAAMgC,KAAKiB,EAAKT,I,EAGzBL,QAAU,SAACc,EAAKT,GACZ,EAAKxC,MAAMmC,QAAQc,EAAKT,I,wEAGlB,IAAD,OACCU,EAASvB,KAAK3B,MAAMkD,OAC1B,OACI,yBAAKN,UAAWL,IAAOY,MAClBD,EAAOE,KAAI,SAACH,EAAKI,GAAN,OACR,yBAAKC,IAAKD,EAAUT,UAAWL,IAAOU,KACjCA,EAAIG,KAAI,SAACZ,EAAMe,GAAP,OACL,kBAAC,EAAD,CAAMhD,MAAOiC,EAAMc,IAAKC,EAAWtB,EAAGoB,EAAUnB,EAAGqB,EAC7CvB,KAAM,EAAKA,KACXG,QAAS,EAAKA,sB,GAxB7BW,IAAMhB,eAAnBkB,EACKD,YAAc,OADnBC,EAGKQ,SAAW,CACdN,OAAQO,IAAUC,QAAQD,IAAUC,QAAQD,IAAUE,UA8B/CX,QCvCA,EACE,SAAC9B,GAAD,oBAAkBA,IADpB,EAEF,MAFE,EAGA,SAAC0C,EAAEC,GAAH,qBAAiBD,EAAjB,YAAsBC,ICyBtBC,E,WAzBX,WAAYC,EAAKC,GAAW,oBACxBrC,KAAKsC,WAAa,IAAIC,UAAUH,GAChCpC,KAAKsC,WAAWE,iBAAiB,WAAW,SAACC,GACzC,IAAMC,EAAWD,EAAQE,KAAKC,MAAM,KACpCC,EAAYH,EAASI,OAAO,EAAE,GAAG,GACjCT,EAASQ,EAAWH,EAASK,KAAK,KAAKC,WAE3ChD,KAAKsC,WAAWE,iBAAiB,QAAQ,WACrCH,EAAS,MAAM,gB,uDAIZ9C,GACPS,KAAKsC,WAAWW,KAAKC,EAAqB3D,M,+BAI1CS,KAAKsC,WAAWW,KAAKC,K,+BAGhBjB,EAAGC,GACRlC,KAAKsC,WAAWW,KAAKC,EAAmBjB,EAAGC,Q,KCxB7CiB,EAAiB,CACnBC,IAAK,MACLC,IAAK,MACLC,KAAM,QAEPC,EAAmB,CAClBC,UAAW,YACXC,GAAI,KACJC,KAAM,WACNC,IAAK,WCPM,SAASC,EAAcvF,GAClC,OAAIA,EAAMwF,SAKN,6BACKxF,EAAMwF,UALJ,KCHA,SAASC,EAAazF,GACjC,OAAO,6BACH,wCAAmB,8BAAOA,EAAM0F,a,qBCAzB,SAASC,EAAa3F,GACjC,OAAO,kBAAC,IAAMY,SAAP,KACFZ,EAAM4F,aACD,wBAAIhD,UAAWL,IAAOsD,cAAtB,8CACA,MCEd,IAAMC,EAAU,CAAC,CACb7D,GAAI,EACJC,GAAI,GAEJ,CACID,GAAI,EACJC,EAAG,GAEP,CACID,GAAI,EACJC,EAAG,GAEP,CACID,EAAG,EACHC,EAAG,GAEP,CACID,EAAG,EACHC,EAAG,GAEP,CACID,EAAG,EACHC,EAAG,GAEP,CACID,EAAG,EACHC,GAAI,GAER,CACID,EAAG,EACHC,GAAI,IAiBZ,SAAS6D,EAAY7C,EAAQjB,EAAGC,EAAG3B,GAAuB,IAElDoC,EAFkCqD,IAAe,yDACjDC,EAAQ,GASZ,OAPAH,EAAQI,SAAQ,SAAAC,IACZxD,EAlBR,SAAqBO,EAAQjB,EAAGC,EAAG3B,EAAOyF,GACtC,GAAI/D,EAAI,GAAKC,EAAI,GAAKD,GAAKiB,EAAOkD,QAAUlE,GAAKgB,EAAOjB,GAAGmE,OACvD,OAAO,KAEX,IAAI/E,EAAS6B,EAAOjB,GAAGC,GACvB,OAAM3B,GAASiB,MAAMH,KAAcG,MAAMH,KAAY2E,EAAS3E,IAAWd,EAAQc,GAAUd,GAChF,CACH0C,IAAKhB,EACLO,KAAMN,GAGP,KAOImE,CAAYnD,EAAQjB,EAAIkE,EAAOlE,EAAGC,EAAIiE,EAAOjE,EAAG3B,EAAOyF,KAE1DC,EAAMK,KAAK3D,MAIZsD,EAiDX,IAAMM,EAAY,CACdC,MAAO,EACPC,MAAO,EACPC,UAAW,IACXC,cAAe,GAEbC,E,YAIF,WAAY5G,GAAQ,IAAD,8BACf,4CAAMA,KAaV6G,SAAW,SAAC5F,EAAO6F,GACf,GAAI7F,IAAU6D,EAAeC,IAAK,CAC9B,GAAI+B,IAAY5B,EAAiBC,UAE7B,YADA,EAAK5D,SAAS,CAACwF,WAAW,IAG9B,GAAID,IAAY5B,EAAiBE,GAI7B,YAHA,EAAK7D,SAAS,CAACyF,SAAS,EAAM9D,OAAQ,GAAI0C,cAAc,IAAQ,WAC5D,EAAKlE,MAAMuC,WAAWgD,YAKlC,GAAIhG,IAAU6D,EAAeE,IAAK,CAC9B,IAAI9B,EAAS4D,EAAQvC,MAAM,MAAM2C,QAAO,SAAAC,GAAI,MAAa,KAATA,KAAa/D,KAAI,SAAA+D,GAAI,OAAIA,EAAK5C,MAAM,OAWpF,OAVI,EAAK7C,MAAMwB,SAAWA,EAAOkD,QAC7BlD,EAAOgD,SAAQ,SAACjD,EAAKmE,GACjBnE,EAAIiD,SAAQ,SAAC1D,EAAM6E,GACX7F,MAAMgB,KACNU,EAAOkE,GAAUC,GAAa,EAAK3F,MAAMwB,OAAOkE,GAAUC,eAK1E,EAAK9F,SAAS,CAAC2B,OAAQA,EAAQ0C,cAAc,IAGjD,GAAI3E,IAAU6D,EAAeG,KAAM,CAC/B,GAAI6B,IAAY5B,EAAiBG,KAE7B,YADA,EAAK9D,SAAS,CAACyF,SAAS,IAGxBF,EAAQQ,WAAWpC,EAAiBI,MACpC,EAAK/D,SAAS,CACViE,SAAUsB,EACV5D,OAAQ,GACR8D,SAAS,MAlDN,EAwDnBlG,YAAc,WACV,EAAKS,SAAS,CACV2B,OAAQ,GACR8D,SAAS,EACTpB,cAAc,EACdJ,SAAU,QA7DC,EAiEnB/D,UAAY,SAACP,EAAOb,EAAgBG,GAChC,EAAKe,SAAS,CAAClB,iBAAgBG,uBAC/B,EAAKkB,MAAMuC,WAAWsD,WAAWrG,IAnElB,EAqEnBc,KAAO,SAACQ,EAAMS,GACV,EAAKvB,MAAMuC,WAAWuD,SAAShF,EAAMS,GACrC,EAAKvB,MAAMuC,WAAWgD,UAvEP,EAyEnBQ,SAAW,SAACC,GACRA,EAAOxB,SAAQ,SAAAyB,GACX,EAAKjG,MAAMuC,WAAWuD,SAASG,EAAMnF,KAAMmF,EAAM1E,QAErD,EAAKvB,MAAMuC,WAAWgD,UA7EP,EA+EnB9E,QAAU,SAACc,EAAKT,GACZ,IAAMU,EAAS,EAAKxB,MAAMwB,OAAOE,KAAI,SAAAH,GAAG,mBAAQA,MAChDC,EAAOD,GAAKT,GAAQ+D,EAAUC,KAC9B,EAAKjF,SAAS,CAAC2B,YAlFA,EAqFnB0E,KAAO,WACH,IAAIC,EAAU,GASd,GARA,EAAKnG,MAAMwB,OAAOgD,SAAQ,SAACjD,EAAKmE,GAC5BnE,EAAIiD,SAAQ,SAAC1D,EAAM6E,GACX7E,IAAS+D,EAAUI,cACnBkB,EAAQvB,KAAK,CAACrD,IAAKmE,EAAU5E,KAAM6E,UAK3CQ,EAAQzB,OACR,EAAKqB,SAASI,OACX,CACH,IAAI3E,EA1JhB,SAAkB4E,GAEd,IAAI5E,EAAS4E,EAAW1E,KAAI,SAAAH,GAAG,mBAAQA,MAwCvC,OAvCAC,EAAOgD,SAAQ,SAACjD,EAAKmE,GACjB,OAAOnE,EAAIiD,SAAQ,SAAC1D,EAAM6E,GACtB,IAAIhG,EAASC,SAASkB,GACtB,IAAKhB,MAAMH,IAAWA,EAASkF,EAAUC,KAAM,CAC3BT,EAAY7C,EAAQkE,EAAUC,GACpCnB,SAAQ,SAAAxD,GACdQ,EAAOR,EAAKO,KAAKP,EAAKF,MAAQ+D,EAAUC,QAE5C,IAAIuB,EAAchC,EAAY7C,EAAQkE,EAAUC,EAAWd,EAAUC,MACjEwB,EAAajC,EAAY7C,EAAQkE,EAAUC,EAAWd,EAAUE,MAChEsB,EAAY3B,OAAS,GAAM2B,EAAY3B,OAAS4B,EAAW5B,SAAY/E,GACvE0G,EAAY7B,SAAQ,SAAAxD,GAChBQ,EAAOR,EAAKO,KAAKP,EAAKF,MAAQ+D,EAAUE,QAI5CuB,EAAW5B,OAAS,GAAK4B,EAAW5B,SAAW/E,GAAU0G,EAAY3B,OAAS,GAC9E2B,EAAY7B,SAAQ,SAAAxD,GAChBQ,EAAOR,EAAKO,KAAKP,EAAKF,MAAQ+D,EAAUI,uBAM5DzD,EAAOgD,SAAQ,SAACjD,EAAKmE,GACjB,OAAOnE,EAAIiD,SAAQ,SAAC1D,EAAM6E,GACtB,IAAIhG,EAASC,SAASkB,GACtB,IAAKhB,MAAMH,IAAWA,EAASkF,EAAUC,KAAM,CAC3C,IAAIuB,EAAchC,EAAY7C,EAAQkE,EAAUC,EAAWd,EAAUC,MACjEwB,EAAajC,EAAY7C,EAAQkE,EAAUC,EAAWd,EAAUE,MAEhEuB,EAAW5B,OAAS,GAAK4B,EAAW5B,SAAW/E,GAAU0G,EAAY3B,OAAS,GAC9E2B,EAAY7B,SAAQ,SAAAxD,GAChBQ,EAAOR,EAAKO,KAAKP,EAAKF,MAAQ+D,EAAUI,uBAMrDzD,EAgHc+E,CAAS,EAAKvG,MAAMwB,QAC7BgF,GAAgB,EASpB,GARAhF,EAAOgD,SAAQ,SAACjD,EAAKmE,GACjBnE,EAAIiD,SAAQ,SAAC1D,EAAM6E,GACX7E,IAAS,EAAKd,MAAMwB,OAAOkE,GAAUC,KACrCa,GAAgB,SAKxBA,EAEA,YADA,EAAK3G,SAAS,CAAC2B,OAAQA,IAG3B,GAAI,EAAKxB,MAAMrB,gBAAkB6C,EAAOiF,OAAM,SAAAlF,GAAG,OAAIA,EAAIkF,OAAM,SAAA3F,GAAI,OAAIhB,MAAMgB,SAEzE,YADA,EAAKR,KAAKoG,KAAKC,MAAMnF,EAAO,GAAGkD,OAAS,GAAIgC,KAAKC,MAAMnF,EAAOkD,OAAS,IAI3E,IAAK,EAAK1E,MAAMrB,eAEZ,YADA,EAAKkB,SAAS,CAACqE,cAAc,IAIjC,GAAI,EAAKlE,MAAMwB,OAAOoF,QAAO,SAACC,EAAOpB,GACjC,OAAOoB,EAAQpB,EAAKD,QAAO,SAAA1E,GAAI,OAAIhB,MAAMgB,MAAO4D,SACjD,GAAMlD,EAAOkD,OAASlD,EAAO,GAAGkD,OAAU,EAAK1E,MAAMlB,mBAAqB,IAEzE,YADA,EAAKe,SAAS,CAAClB,gBAAgB,IAMnC,IAFA,IAAIwH,EAAU,KACVW,EAAW,EACNvG,EAAI,EAAGA,EAAIiB,EAAOkD,OAAQnE,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIgB,EAAOjB,GAAGmE,OAAQlE,IAClC,GAAIV,MAAM0B,EAAOjB,GAAGC,IAAK,CACrB,IAAIuG,EAAe1C,EAAY7C,EAAQjB,EAAGC,EAAGqE,EAAUE,MAAM,GACzDgC,EAAeD,IACfA,EAAWC,EACXZ,EAAU,CACN5E,IAAKhB,EACLO,KAAMN,IAM1B,GAAI2F,EAEA,YADA,EAAK7F,KAAK6F,EAAQrF,KAAMqF,EAAQ5E,KAGpC,IAAK,IAAIhB,EAAI,EAAGA,EAAIiB,EAAOkD,OAAQnE,IAAK,CACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIgB,EAAOjB,GAAGmE,OAAQlE,IAClC,GAAIgB,EAAOjB,GAAGC,KAAOqE,EAAUC,KAAM,CACjCqB,EAAU,CACN5E,IAAKhB,EACLO,KAAMN,GAEV,MAGR,GAAI2F,EACA,MAGR,GAAIA,EAEA,YADA,EAAK7F,KAAK6F,EAAQrF,KAAMqF,EAAQ5E,KAIpC,EAAK1B,SAAS,CAACqE,cAAc,MAtKjC,EAAKlE,MAAQ,CACTwB,OAAQ,GACRe,WAAY,IAAIH,EAAS,mCAAoC,EAAK+C,UAClEG,SAAS,EACTpF,OAAO,EACPgE,cAAc,EACdvF,gBAAgB,EAChBmF,SAAU,KACVuB,WAAW,GAVA,E,kFAgLXpF,KAAKD,MAAMsF,SACRrF,KAAKD,MAAMwB,OAAOkD,OAAS,IAC1BzE,KAAKD,MAAMrB,iBAAmBsB,KAAKD,MAAMkE,eAC7CjE,KAAKiG,S,+BAMT,IAAMlC,EAAa/D,KAAKD,MAAMwB,OAAOoF,QAAO,SAACC,EAAOpB,GAChD,OAAOoB,EAAQpB,EAAKD,QAAO,SAAA1E,GAAI,OAAIA,IAAS+D,EAAUE,QAAML,SAC7D,GAEGsC,EAAO/G,KAAKD,MAAMwB,OAAOyF,MAAK,SAAA1F,GAAG,OAAEA,EAAI0F,MAAK,SAAAnG,GAAI,OAAEA,IAAS+D,EAAUG,kBACtE/E,KAAKD,MAAMwB,OAAOiF,OAAM,SAAAlF,GAAG,OAAEA,EAAIkF,OAAM,SAAA3F,GAAI,OAAEA,IAAS+D,EAAUG,YAAelF,MAAMgB,SAE1F,OACI,yBAAKI,UAAU,OACX,kBAAC2C,EAAD,CAAeC,SAAU7D,KAAKD,MAAM8D,WACpC,6BACA,kBAAC,EAAD,CAAU/D,UAAWE,KAAKF,UAChBG,MAAO8G,EACP5H,YAAaa,KAAKb,cAC5B,6BAECa,KAAKD,MAAMsF,QAER,kBAAC,IAAMpG,SAAP,KACI,kBAAC6E,EAAD,CAAcC,WAAYA,IAC1B,kBAACC,EAAD,CAAcC,aAAcjE,KAAKD,MAAMkE,gBAEzC,KACN,kBAAC,EAAD,CAAM1C,OAAQvB,KAAKD,MAAMwB,OAAQlB,KAAML,KAAKK,KAAMG,QAASR,KAAKQ,e,GApN9DW,IAAM8F,WAAlBhC,EAEK7D,YAAc,MA0NV6D,QCjVfiC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,kBCHjDnJ,EAAOC,QAAU,CAAC,KAAO,qBAAqB,KAAO,qBAAqB,KAAO,qBAAqB,KAAO,uB,kBCA7GD,EAAOC,QAAU,CAAC,KAAO,qBAAqB,IAAM,uB","file":"static/js/main.44059ac4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"makeDecision\":\"styles_makeDecision__1hwdq\"};","import React from \"react\";\r\nexport default function Autobot(props){\r\n    return <div>\r\n        Dev mode:\r\n        <div>\r\n            <span>Use random decisions</span> <input type=\"checkbox\" onChange={props.useAutobot}\r\n        checked={props.autobotEnabled}/>\r\n        </div>\r\n        <div>\r\n            <span>Stop autobot on unopened cells %: </span> <input type=\"number\" onChange={props.setAutobotPercent}\r\n                                                                   value={props.autobotStopPercent} min={0} max={100}/>\r\n        </div>\r\n    </div>\r\n}\r\n","import React from \"react\";\r\nexport default function Loose(props){\r\n    return (<React.Fragment>\r\n        <h3>You lose</h3>\r\n        <button onClick={props.restartGame}>Restart</button>\r\n    </React.Fragment>)\r\n}\r\n","import React, {PureComponent} from \"react\";\r\nimport Autobot from \"./Autobot\";\r\nimport Loose from \"./Loose\";\r\n\r\nexport default class Controls extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            level: 1,\r\n            autobotEnabled: false,\r\n            autobotStopPercent: 0\r\n        }\r\n    }\r\n\r\n    changeLevel = (event) => {\r\n        const level = event.target.value;\r\n        if (/^[1-9]*$/.test(level)) {\r\n            const parsed = parseInt(level);\r\n            this.setState({level: isNaN(parsed) ? '' : parsed});\r\n        }\r\n\r\n    };\r\n\r\n    useAutobot = (event) => {\r\n        this.setState({autobotEnabled: !!event.target.value});\r\n    }\r\n\r\n    setAutobotPercent = (event) => {\r\n        this.setState({autobotStopPercent: event.target.value});\r\n    }\r\n\r\n    startGame = () => {\r\n        this.props.startGame(this.state.level, this.state.autobotEnabled, this.state.autobotStopPercent);\r\n    }\r\n\r\n    render() {\r\n        return <React.Fragment>\r\n            {this.props.loose\r\n                ? <Loose restartGame={this.props.restartGame}/>\r\n                : <React.Fragment>\r\n                    <span>Select level:</span>\r\n                    <input type=\"text\" placeholder={\"1,2,3,4 or other\"}\r\n                           onChange={this.changeLevel}\r\n                           value={this.state.level}/>\r\n                    {this.state.level ?\r\n                        <button onClick={this.startGame}>Start</button>\r\n                        : null}\r\n                    <Autobot useAutobot={this.useAutobot} setAutobotPercent={this.setAutobotPercent}\r\n                             autobotEnabled={this.state.autobotEnabled}\r\n                             autobotStopPercent={this.state.autobotStopPercent}/>\r\n                </React.Fragment>\r\n            }\r\n\r\n        </React.Fragment>\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport styles from './styles.module.css';\r\nimport classnames from 'classnames';\r\n\r\nclass Cell extends React.PureComponent {\r\n    static displayName = 'Cell';\r\n\r\n    open = () => {\r\n        this.props.open(this.props.i, this.props.j);\r\n    };\r\n\r\n    setFlag = (event) => {\r\n        event.preventDefault();\r\n        this.props.setFlag(this.props.i, this.props.j);\r\n    };\r\n\r\n    render() {\r\n        const classes = classnames({\r\n            [styles.cell]:true,\r\n            [styles.safe]: this.props.value >= 0,\r\n            [styles.flag]: this.props.value === -1,\r\n            [styles.mine]: this.props.value === -2\r\n        });\r\n        return <span className={classes} onClick={this.open} onContextMenu={this.setFlag}>\r\n                {this.props.value}\r\n        </span>\r\n    }\r\n}\r\n\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from './styles.module.css';\r\nimport Cell from \"../Cell\";\r\n\r\nclass Desk extends React.PureComponent {\r\n    static displayName = 'Desk';\r\n\r\n    static propType = {\r\n        matrix: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))\r\n    };\r\n\r\n    open = (cell, row) => {\r\n        this.props.open(row, cell);\r\n    };\r\n\r\n    setFlag = (row, cell) => {\r\n        this.props.setFlag(row, cell);\r\n    };\r\n\r\n    render() {\r\n        const matrix = this.props.matrix;\r\n        return (\r\n            <div className={styles.desk}>\r\n                {matrix.map((row, indexRow) =>\r\n                    <div key={indexRow} className={styles.row}>\r\n                        {row.map((cell, indexCell) =>\r\n                            <Cell value={cell} key={indexCell} i={indexRow} j={indexCell}\r\n                                  open={this.open}\r\n                                  setFlag={this.setFlag}/>\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Desk;\r\n","export default {\r\n    CREATE_GAME: (level) => `new ${level}`,\r\n    GET_MAP: 'map',\r\n    OPEN_CELL: (x,y) => `open ${x} ${y}`\r\n}\r\n","import commands from './commands';\r\n\r\nclass Realtime {\r\n    constructor(url, callback) {\r\n        this.connection = new WebSocket(url);\r\n        this.connection.addEventListener('message', (message) => {\r\n            const response = message.data.split(':'),\r\n            eventType = response.splice(0,1)[0];\r\n            callback(eventType, response.join(':').trim())\r\n        });\r\n        this.connection.addEventListener('open', () => {\r\n            callback('new','connected');\r\n        });\r\n    }\r\n\r\n    createGame(level) {\r\n        this.connection.send(commands.CREATE_GAME(level))\r\n    }\r\n\r\n    getMap() {\r\n        this.connection.send(commands.GET_MAP);\r\n    }\r\n\r\n    openCell(x, y) {\r\n        this.connection.send(commands.OPEN_CELL(x, y));\r\n    }\r\n}\r\n\r\nexport default Realtime;\r\n","const RESPONSE_EVENT = {\r\n    NEW: 'new',\r\n    MAP: 'map',\r\n    OPEN: 'open'\r\n\r\n}, RESPONSE_PAYLOAD = {\r\n    CONNECTED: 'connected',\r\n    OK: 'OK',\r\n    LOSE: 'You lose',\r\n    WIN: 'You win'\r\n};\r\nexport {\r\n    RESPONSE_EVENT, RESPONSE_PAYLOAD\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function LevelPassword(props) {\r\n    if(!props.password){\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.password}\r\n        </div>)\r\n}\r\n","import React from 'react';\r\nexport default function MinesCounter(props){\r\n    return <div>\r\n        <span>Mines:</span><span>{props.minesCount}</span>\r\n    </div>\r\n}\r\n","import React from \"react\";\r\nimport styles from './styles.module.css';\r\n\r\nexport default function HelpInformer(props){\r\n    return <React.Fragment>\r\n        {props.helpRequired\r\n            ? <h3 className={styles.makeDecision}>Open cell, please! (Can not make decision)</h3>\r\n            : null}\r\n    </React.Fragment>\r\n}\r\n","import React from 'react';\r\nimport Controls from \"./Controls\";\r\nimport Desk from './Desk';\r\nimport Realtime from './modules/realtime';\r\nimport {RESPONSE_EVENT, RESPONSE_PAYLOAD} from './modules/events';\r\nimport LevelPassword from './LevelPassword';\r\nimport MinesCounter from \"./MinesCounter\";\r\nimport HelpInformer from \"./HelpInformer\";\r\n\r\nconst offsets = [{\r\n    i: -1,\r\n    j: -1\r\n},\r\n    {\r\n        i: -1,\r\n        j: 0\r\n    },\r\n    {\r\n        i: -1,\r\n        j: 1\r\n    },\r\n    {\r\n        i: 0,\r\n        j: 1\r\n    },\r\n    {\r\n        i: 1,\r\n        j: 1\r\n    },\r\n    {\r\n        i: 1,\r\n        j: 0\r\n    },\r\n    {\r\n        i: 1,\r\n        j: -1\r\n    },\r\n    {\r\n        i: 0,\r\n        j: -1\r\n    }];\r\n\r\nfunction findElement(matrix, i, j, value, strict) {\r\n    if (i < 0 || j < 0 || i >= matrix.length || j >= matrix[i].length) {\r\n        return null;\r\n    }\r\n    let parsed = matrix[i][j];\r\n    if ((!value && isNaN(parsed)) || (!isNaN(parsed) && (strict ? parsed === value : parsed >= value))) {\r\n        return {\r\n            row: i,\r\n            cell: j\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction getSiblings(matrix, i, j, value, strict = true) {\r\n    let mines = [],\r\n        mine;\r\n    offsets.forEach(offset => {\r\n        mine = findElement(matrix, i + offset.i, j + offset.j, value, strict);\r\n        if (mine) {\r\n            mines.push(mine);\r\n        }\r\n    });\r\n\r\n    return mines;\r\n}\r\n\r\nfunction setupMap(old_matrix) {\r\n\r\n    let matrix = old_matrix.map(row => [...row]);\r\n    matrix.forEach((row, rowIndex) => {\r\n        return row.forEach((cell, cellIndex) => {\r\n            let parsed = parseInt(cell);\r\n            if (!isNaN(parsed) && parsed > CELL_FLAG.FLAG) {\r\n                let new_flags = getSiblings(matrix, rowIndex, cellIndex);\r\n                new_flags.forEach(flag => {\r\n                    matrix[flag.row][flag.cell] = CELL_FLAG.FLAG;\r\n                });\r\n                let exist_flags = getSiblings(matrix, rowIndex, cellIndex, CELL_FLAG.FLAG),\r\n                    real_mines = getSiblings(matrix, rowIndex, cellIndex, CELL_FLAG.MINE);\r\n                if (exist_flags.length > 0 && (exist_flags.length + real_mines.length) === parsed) {\r\n                    exist_flags.forEach(flag => {\r\n                        matrix[flag.row][flag.cell] = CELL_FLAG.MINE;\r\n                    });\r\n                }\r\n\r\n                if (real_mines.length > 0 && real_mines.length === parsed && exist_flags.length > 0) {\r\n                    exist_flags.forEach(flag => {\r\n                        matrix[flag.row][flag.cell] = CELL_FLAG.SAFE_TO_OPEN;\r\n                    });\r\n                }\r\n            }\r\n        })\r\n    });\r\n    matrix.forEach((row, rowIndex) => {\r\n        return row.forEach((cell, cellIndex) => {\r\n            let parsed = parseInt(cell);\r\n            if (!isNaN(parsed) && parsed > CELL_FLAG.FLAG) {\r\n                let exist_flags = getSiblings(matrix, rowIndex, cellIndex, CELL_FLAG.FLAG),\r\n                    real_mines = getSiblings(matrix, rowIndex, cellIndex, CELL_FLAG.MINE);\r\n\r\n                if (real_mines.length > 0 && real_mines.length === parsed && exist_flags.length > 0) {\r\n                    exist_flags.forEach(flag => {\r\n                        matrix[flag.row][flag.cell] = CELL_FLAG.SAFE_TO_OPEN;\r\n                    });\r\n                }\r\n            }\r\n        })\r\n    });\r\n    return matrix;\r\n}\r\n\r\n\r\nconst CELL_FLAG = {\r\n    FLAG: -1,\r\n    MINE: -2,\r\n    REAL_MINE: '*',\r\n    SAFE_TO_OPEN: -3\r\n}\r\nclass App extends React.Component {\r\n\r\n    static displayName = 'App';\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            matrix: [],\r\n            connection: new Realtime('wss://hometask.eg1236.com/game1/', this.resolver),\r\n            started: false,\r\n            loose: false,\r\n            helpRequired: true,\r\n            autobotEnabled: false,\r\n            password: null,\r\n            connected: false\r\n        };\r\n    }\r\n\r\n    resolver = (event, payload) => {\r\n        if (event === RESPONSE_EVENT.NEW) {\r\n            if (payload === RESPONSE_PAYLOAD.CONNECTED) {\r\n                this.setState({connected: true});\r\n                return;\r\n            }\r\n            if (payload === RESPONSE_PAYLOAD.OK) {\r\n                this.setState({started: true, matrix: [], helpRequired: false}, () => {\r\n                    this.state.connection.getMap();\r\n                });\r\n                return;\r\n            }\r\n        }\r\n        if (event === RESPONSE_EVENT.MAP) {\r\n            let matrix = payload.split('\\n').filter(line => line !== '').map(line => line.split(''));\r\n            if (this.state.matrix === matrix.length) {\r\n                matrix.forEach((row, rowIndex) => {\r\n                    row.forEach((cell, cellIndex) => {\r\n                        if (isNaN(cell)) {\r\n                            matrix[rowIndex][cellIndex] = this.state.matrix[rowIndex][cellIndex];\r\n                        }\r\n                    })\r\n                });\r\n            }\r\n            this.setState({matrix: matrix, helpRequired: false});\r\n            return;\r\n        }\r\n        if (event === RESPONSE_EVENT.OPEN) {\r\n            if (payload === RESPONSE_PAYLOAD.LOSE) {\r\n                this.setState({started: false});\r\n                return;\r\n            }\r\n            if (payload.startsWith(RESPONSE_PAYLOAD.WIN)) {\r\n                this.setState({\r\n                    password: payload,\r\n                    matrix: [],\r\n                    started: false\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    restartGame = () => {\r\n        this.setState({\r\n            matrix: [],\r\n            started: false,\r\n            helpRequired: false,\r\n            password: null\r\n        });\r\n    }\r\n\r\n    startGame = (level, autobotEnabled, autobotStopPercent) => {\r\n        this.setState({autobotEnabled, autobotStopPercent});\r\n        this.state.connection.createGame(level);\r\n    };\r\n    open = (cell, row) => {\r\n        this.state.connection.openCell(cell, row);\r\n        this.state.connection.getMap();\r\n    };\r\n    openList = (points) => {\r\n        points.forEach(point => {\r\n            this.state.connection.openCell(point.cell, point.row);\r\n        });\r\n        this.state.connection.getMap();\r\n    };\r\n    setFlag = (row, cell) => {\r\n        const matrix = this.state.matrix.map(row => [...row]);\r\n        matrix[row][cell] = CELL_FLAG.FLAG;\r\n        this.setState({matrix});\r\n    };\r\n\r\n    step = () => {\r\n        let to_open = [];\r\n        this.state.matrix.forEach((row, rowIndex) => {\r\n            row.forEach((cell, cellIndex) => {\r\n                if (cell === CELL_FLAG.SAFE_TO_OPEN) {\r\n                    to_open.push({row: rowIndex, cell: cellIndex});\r\n                }\r\n\r\n            });\r\n        });\r\n        if (to_open.length) {\r\n            this.openList(to_open);\r\n        } else {\r\n            let matrix = setupMap(this.state.matrix);\r\n            let should_update = false;\r\n            matrix.forEach((row, rowIndex) => {\r\n                row.forEach((cell, cellIndex) => {\r\n                    if (cell !== this.state.matrix[rowIndex][cellIndex]) {\r\n                        should_update = true;\r\n                    }\r\n                })\r\n            });\r\n\r\n            if (should_update) {\r\n                this.setState({matrix: matrix});\r\n                return;\r\n            }\r\n            if (this.state.autobotEnabled && matrix.every(row => row.every(cell => isNaN(cell)))) {\r\n                this.open(Math.round(matrix[0].length / 2), Math.round(matrix.length / 2));\r\n                return;\r\n            }\r\n\r\n            if (!this.state.autobotEnabled) {\r\n                this.setState({helpRequired: true});\r\n                return;\r\n            }\r\n\r\n            if (this.state.matrix.reduce((accum, line) => {\r\n                return accum + line.filter(cell => isNaN(cell)).length;\r\n            }, 0) < (matrix.length * matrix[0].length) * this.state.autobotStopPercent / 100) {\r\n                this.setState({autobotEnabled: false});\r\n                return;\r\n            }\r\n\r\n            let to_open = null;\r\n            let maxflags = 0;\r\n            for (let i = 0; i < matrix.length; i++) {\r\n                for (let j = 0; j < matrix[i].length; j++) {\r\n                    if (isNaN(matrix[i][j])) {\r\n                        let siblingFlags = getSiblings(matrix, i, j, CELL_FLAG.MINE, false);\r\n                        if (siblingFlags > maxflags) {\r\n                            maxflags = siblingFlags;\r\n                            to_open = {\r\n                                row: i,\r\n                                cell: j\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (to_open) {\r\n                this.open(to_open.cell, to_open.row);\r\n                return;\r\n            }\r\n            for (let i = 0; i < matrix.length; i++) {\r\n                for (let j = 0; j < matrix[i].length; j++) {\r\n                    if (matrix[i][j] === CELL_FLAG.FLAG) {\r\n                        to_open = {\r\n                            row: i,\r\n                            cell: j\r\n                        };\r\n                        break;\r\n                    }\r\n                }\r\n                if (to_open) {\r\n                    break;\r\n                }\r\n            }\r\n            if (to_open) {\r\n                this.open(to_open.cell, to_open.row);\r\n                return;\r\n            }\r\n\r\n            this.setState({helpRequired: true});\r\n\r\n        }\r\n\r\n\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.started\r\n            && this.state.matrix.length > 0\r\n            && (this.state.autobotEnabled || !this.state.helpRequired)) {\r\n            this.step();\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const minesCount = this.state.matrix.reduce((accum, line) => {\r\n            return accum + line.filter(cell => cell === CELL_FLAG.MINE).length;\r\n        }, 0);\r\n\r\n        const lose = this.state.matrix.some(row=>row.some(cell=>cell === CELL_FLAG.REAL_MINE))\r\n         && !this.state.matrix.every(row=>row.every(cell=>cell === CELL_FLAG.REAL_MINE ||  !isNaN(cell)));\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <LevelPassword password={this.state.password}/>\r\n                <hr/>\r\n                <Controls startGame={this.startGame}\r\n                          loose={lose}\r\n                          restartGame={this.restartGame}/>\r\n                <hr/>\r\n\r\n                {this.state.started\r\n                    ?\r\n                    <React.Fragment>\r\n                        <MinesCounter minesCount={minesCount}/>\r\n                        <HelpInformer helpRequired={this.state.helpRequired}/>\r\n                    </React.Fragment>\r\n                    : null}\r\n                <Desk matrix={this.state.matrix} open={this.open} setFlag={this.setFlag}/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"styles_cell__XNJeH\",\"safe\":\"styles_safe__2yXuU\",\"flag\":\"styles_flag__1Y40j\",\"mine\":\"styles_mine__MLcNf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"desk\":\"styles_desk__DUIO6\",\"row\":\"styles_row__DtQBb\"};"],"sourceRoot":""}